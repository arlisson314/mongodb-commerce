use("commerce")
// db.produtos.count(); //1
// db.produtos.find({}, {nome: 1, vendidos: 1, _id: 0}).sort({vendidos: 1}); //2
// db.produtos.find({}, { nome: 1, vendidos: 1, _id: 0 }).sort({ age: 1 }).limit(1); //3
// db.produtos.find({ $and: [
//   { vendidos: { $gte: 50 } },
//   { vendidos: { $lte: 100 } },
//   ] },
// { nome: 1, vendidos: 1, _id: 0 }).sort({ vendidos: 1 }); //4

// db.produtos.find({ $or: [
//   { curtidas: { $eq: 36 } },
//   { vendidos: { $eq: 85 } },
// ] },
// { nome: 1, vendidos: 1, curtidas: 1, _id: 0 }); //5


// 6 - Retorne o nome e as curtidas dos lanches que tiveram curtidas maiores que 10 e menores que 100
// db.produtos.find({ $and: [
//   { curtidas: { $gt: 10 } },
//   { curtidas: { $lt: 100 } },
//   ] },
//   { nome: 1, curtidas: 1, _id: 0 });

// 7 - Retorne o nome e vendidos dos lanches que tenham sido vendidos com uma quantidade diferente de 50 e em que o campo tags n√£o exista
// db.produtos.find({ $and: [
//   { quantidade: { $ne: 50 } },
//   { tags: { $exists: false } },
// ] },
// { nome: 1, vendidos: 1, _id: 0 });

// 8 - Delete os lanches com menos de 50 curtidas e retorne o nome dos lanches que restaram no bancoco
// db.produtos.deleteMany({curtidas: {$lt: 50}});
// db.produtos.find({}, { nome: 1, _id: 0});

// 9 - Retorne o nome de todos os lanches que possuam calorias abaixo de 500
// db.produtos.find({ valoresNutricionais: { $elemMatch: { tipo: "calorias", quantidade: { $lt: 500 } } } }, { nome: 1, _id: 0 });

// 10 - Retorne o nome de todos os lanches que tenham o percentual de prote√≠nas maior ou igual a 30 e menor ou igual a 40
// db.produtos.find({ valoresNutricionais: { $elemMatch:
// { tipo: "prote√≠nas", percentual: { $gte: 30, $lte: 40 } } } },
// { nome: 1, _id: 0 });

// 11 - Retorne o nome do produto, a quantidade de curtidas e quantos itens foram vendidos dos produtos que n√£o sejam iguais a Big Mac e McChicken

// db.produtos.find({ nome: { $ne:"Big Mac" }, nome: { $ne:"McChicken" } },
// { nome: 1, curtidas: 1, vendidos: 1, _id: 0 });

// db.produtos.find({ $and: [{ nome: { $ne:"Big Mac"} }, { nome: { $ne:"McChicken" } }] },
// { nome: 1, curtidas: 1, vendidos: 1, _id: 0 });

// 12 - Adicione ketchup aos ingredientes para todos os sandu√≠ches menos o McChicken, garantindo que n√£o haja duplicidade nos ingredientes

// Para isso, escreva no arquivo desafio12.js duas queries, nesta ordem:

// Crie uma query que adicione ketchup aos ingredientes para todos os sandu√≠ches menos o McChicken, garantindo que n√£o haja duplicidade nos ingredientes.

// Crie uma query que retorne o nome e ingredientes de todos os documentos.
// db.produtos.updateMany({ nome: { $ne:"McChicken"} },
// { $addToSet: { ingredientes: "ketchup"} });

// db.produtos.find({}, { nome: 1, ingredientes: 1, _id: 0 });


// 13 - Inclua o campo criadoPor em todos os documentos, colocando Ronald McDonald no valor desse campo
// Para isso, escreva no arquivo desafio13.js duas queries, nesta ordem:

// Crie uma query que adicione o campo criadoPor em todos os documentos, colocando "Ronald McDonald" no valor desse campo.

// Crie uma query que retorne o nome e criadoPor de todos os produtos.

// db.produtos.updateMany({}, { $set: { criadoPor: "Ronald McDonald" } });
// db.produtos.updateMany({}, { criadoPor: 1, _id: 0 });

// 14 - Crie uma query que retorne todos os lanches que possuem picles em seus ingredientes e mostre apenas os 3 primeiros itens contidos no array valoresNutricionais
// Para isso, escreva a query no arquivo desafio14.js
// Sua query deve retornar apenas os campos nome, ingredientes e valoresNutricionais.

// db.produtos.find({ ingredientes: "picles"},
// {nome: 1, ingredientes: 1, valoresNutricionais: 1, _id: 0});

// 15 - Adicione o campo avaliacao em todos os documentos da cole√ß√£o e efetue altera√ß√µes nesse campo
// Para isso, escreva no arquivo desafio15.js quatro queries, nesta ordem:

// Crie uma query que inclua o campo avaliacao do tipo NumberInt, com o valor 0 em todos os documentos da cole√ß√£o.

// Crie uma query que incremente o valor do campo avaliacao em 5 em todos os sandu√≠ches de carne do tipo bovino. üëÄDe olho na dica: utilize como filtro o campo tags.

// Crie uma query que incremente o valor do campo avaliacao em 3 em todos os sandu√≠ches de ave.

// Crie uma query que retorne o nome e avaliacao de todos os sandu√≠ches.

// db.produtos.updateMany({}, { $set: { avaliacao: NumberInt("0") } });
// db.produtos.updateMany({tags: {$in: ["bovino"]}}, { $inc: {avaliacao: 5}});
// db.produtos.updateMany({tags: {$in: ["ave"]}}, { $inc: {avaliacao: 3}});
// db.produtos.find({}, {nome: 1, avaliacao: 1, _id: 0});


// 16 - Adicione o campo ultimaModificacao com a data corrente somente no sandu√≠che Big Mac
// Para isso, escreva no arquivo desafio16.js duas queries, nesta ordem:

// Crie uma query que inclua somente ao sandu√≠che Big Mac o campo ultimaModificacao com a data corrente. Para a data corrente fa√ßa uso do tipo date ou timestamp.

// Crie uma query que retorne o nome de todos os documentos em que o campo ultimaModificacao existe.

// db.produtos.updateOne({nome: "Big Mac"},
// {$currentDate: { ultimaModificacao: { $type: "timestamp" } }});

// db.produtos.find({ ultimaModificacao: { $exists: true } }, {nome: 1, _id: 0});

// 17 - Retorne a quantidade total de produtos em uma nova cole√ß√£o chamada resumoProdutos
// Para isso, escreva no arquivo desafio17.js duas queries, nesta ordem:

// Crie uma query que insira na cole√ß√£o resumoProdutos um documento com os campos: franquia com o valor McDonalds e totalProdutos com o valor sendo a quantidade total de produtos registrados na cole√ß√£o produtos.

// Crie uma query que retorne os campos franquia e o totalProdutos da cole√ß√£o resumoProdutos, resultantes da primeira query.
// db.resumoProdutos.insertOne({
//   franquia: "McDonalds",
//   totalProdutos: db.produtos.estimatedDocumentCount(),
// });

// db.resumoProdutos.find({}, {franquia: 1, totalProdutos: 1, _id: 0 });

// 18 - Inclua bacon no final da lista de ingredientes dos sandu√≠ches Big Mac e Quarteir√£o com Queijo
// Para isso, escreva no arquivo desafio18.js duas queries, nesta ordem:
// Crie uma query que fa√ßa a inclus√£o de bacon no final da lista de ingredientes dos sandu√≠ches Big Mac e Quarteir√£o com Queijo.
// Crie uma query que retorne o nome e ingredientes de todos os documentos.

// db.produtos.updateMany({nome: {$in: ["Big Mac", "Quarteir√£o com Queijo" ]}},
// {$addToSet: { ingredientes: "bacon"}});

// db.produtos.find({}, {nome: 1, ingredientes: 1, _id: 0});

// 19 - Remova o item cebola de todos os sandu√≠ches
// Para isso, escreva no arquivo desafio19.js duas queries, nesta ordem:
// Crie uma query que fa√ßa a remo√ß√£o do item cebola em todos os sandu√≠ches.
// Crie uma query que retorne o nome e ingredientes de todos os documentos.

// db.produtos.updateMany({},
// { $pull: { ingredientes: { $in: [ "cebola" ] });

// db.produtos.find({}, { nome: 1, ingredientes: 1, _id: 0});

// 20 - Remova o primeiro ingrediente do sandu√≠che Quarteir√£o com Queijo
// Para isso, escreva no arquivo desafio20.js duas queries, nesta ordem:
// Crie uma query que fa√ßa a remo√ß√£o do primeiro ingrediente no sandu√≠che Quarteir√£o com Queijo.
// Crie uma query que retorne o nome e ingredientes de todos os documentos.

// db.produtos.updateMany({nome: "Quarteir√£o com Queijo"},
// { ingredientes: { $pop: -1 }});

// db.produtos.find({}, {noem: 1, ingrediente: 1, _id: 0});


// 21 - Remova o √∫ltimo ingrediente do sandu√≠che Cheddar McMelt
// Para isso, escreva no arquivo desafio21.js duas queries, nesta ordem:
// Crie uma query que fa√ßa a remo√ß√£o do √∫ltimo ingrediente no sandu√≠che Cheddar McMelt.
// Crie uma query que retorne o nome e ingredientes de todos os documentos.

// db.produtos.updateOne({ nome: "Cheddar McMelt" },
// { $pop: { ingredientes: 1 } });

// db.produtos.find({}, { nome: 1, ingredientes: 1, _id: 0 });

// 22 - Adicione a quantidade de vendas dos sandu√≠ches por dia da semana
// Para isso, escreva no arquivo desafio22.js quatro queries, nesta ordem:

// Crie uma query que inclua um campo vendasPorDia em todos os sandu√≠ches. O valor deste campo dever√° ser um array com sete posi√ß√µes. Cada uma delas representar√° um dia da semana, e cada posi√ß√£o iniciar√° em 0. O array deve seguir a estrutura do exemplo abaixo:
// "vendasPorDia": [0, 0, 0, 0, 0, 0, 0]
// Crie uma query que incremente as vendas de Big Mac √†s quartas-feiras em 60.
// Crie uma query que incremente as vendas de todos os sandu√≠ches de carne do tipo bovino aos s√°bados em 120.
// Crie uma query que retorne o nome e vendasPorDia de todos os documentos.

// db.produtos.updateMany({}, { $set: { vendasPorDia: [0, 0, 0, 0, 0, 0, 0] } });
// db.produtos.updateOne({ nome: "Big Mac" }, { $inc: { "vendasPorDia.3": 60 } });
// db.produtos.updateOne({ tags: "bovino" }, { $inc: { "vendasPorDia.6": 120 } });
// db.produtos.find({}, { nome: 1, vendasPorDia: 1, _id: 0 });

// 23 - Insira os valores combo e tasty no array tags de todos os sandu√≠ches e aproveite para deixar os valores em ordem alfab√©tica ascendente (A a Z)
// Para isso, escreva no arquivo desafio23.js duas queries, nesta ordem:
// Crie uma query que fa√ßa tanto a inser√ß√£o dos valores combo e tasty no array tags de todos os sandu√≠ches. Ordene os valores de tags em ordem alfab√©tica ascendente.
// Crie uma query que retorne o nome e tags de todos os documentos.

// db.produtos.updateMany({}, { $push: { tags: { $each: ["combo", "tasty"], $sort: 1 } } });
// db.produtos.find({}, { nome: 1, tags: 1, _id: 0 });

// Ordene em todos os documentos os valores do array valoresNutricionais pelo campo percentual de forma decrescente
// Para isso, escreva no arquivo desafio24.js duas queries, nesta ordem:
// Crie uma query que fa√ßa em todos os documentos a ordena√ß√£o dos valores do array valoresNutricionais pelo campo percentual de forma decrescente. eyesDe olho na dica: mesmo sem adicionar nenhum novo valor, para essa opera√ß√£o √© necess√°rio utilizar tamb√©m o modificador $each.
// Crie uma query que retorne o nome e valoresNutricionais de todos os documentos.
// db.produtos.updateMany({},
// { $push: { valoresNutricionais: { $each: [], $sort: { percentual: -1 } } } });

// db.produtos.find({}, { nome: 1, valoresNutricionais: 1, _id: 0 });

// 25 - Adicione o valor muito s√≥dio ao final do array tags nos produtos em que o percentual de s√≥dio seja maior ou igual a 40
// Para isso, escreva no arquivo desafio25.js duas queries, nesta ordem:
// Crie uma query que fa√ßa a adi√ß√£o do valor muito s√≥dio ao final do array tags nos produtos em que o percentual de s√≥dio seja maior ou igual a 40.
// Crie uma query que retorne o nome e tags de todos os documentos.

// db.produtos.updateMany(
//   { valoresNutricionais: { $elemMatch:{tipo: "sodio", percentual: {$gte: 40} }}},
//   { $push: {tags:  "muito s√≥dio"}},
// );
// db.produtos.find({}, {nome: 1, tags: 1, _id: 0});

// 26 - Adicione o valor cont√©m s√≥dio ao final do array tags nos produtos em que o percentual de s√≥dio seja maior do que 20 e menor do que 40
// Para isso, escreva no arquivo desafio26.js duas queries, nesta ordem:
// Crie uma query que fa√ßa a adi√ß√£o do valor cont√©m s√≥dio ao final do array tags nos produtos em que o percentual de s√≥dio seja maior do que 20 e menor do que 40.
// Crie uma query que retorne o nome e tags de todos os documentos.

// db.produtos.updateMany(
//   { valoresNutricionais: { $elemMatch: { tipo: "s√≥dio", percentual: { $gt: 20, $lt: 40 } } } },
//   { $push: { tags: "muito s√≥dio" } },
// );

// db.produtos.find({}, { nome: 1, tags: 1, _id: 0 });

// 27 - Conte quantos produtos cont√©m Mc no nome, sem considerar letras mai√∫sculas ou min√∫sculas
// Para isso, escreva a query no arquivo desafio27.js
// db.produtos.countDocuments({ nome: { $regex: /Mc/i } });

// 28 - Conte quantos produtos t√™m 4 ingredientes
// Para isso, escreva a query no arquivo desafio28.js

// db.produtos.countDocuments({ ingredientes: { $size: 4 } });

// 29 - Renomeie o campo descricao para descricaoSite em todos os documentos
// Para isso, escreva no arquivo desafio29.js duas queries, nesta ordem:
// Crie uma query que fa√ßa a renomea√ß√£o do campo descricao para descricaoSite em todos os documentos.
// Crie uma query que retorne o nome e descricaoSite de todos os documentos.

// db.produtos.updateMany({}, { $rename: { 'descricao': 'descricaoSite' }});
// db.produtos.find({}, { nome: 1, descricaoSite: 1, _id: 0});

// 30 - Remova o campo curtidas do item Big Mac
// Para isso, escreva no arquivo desafio30.js duas queries, nesta ordem:
// Crie uma query que fa√ßa a remo√ß√£o do campo curtidas do item Big Mac.
// Crie uma query que retorne o nome para todos os documentos e curtidas (exceto para Big Mac).
// db.produtos.updateOne({ nome: "Big Mac" }, { $unset: { curtidas: "" } });
// db.produtos.find({ nome: { $ne: "Big Mac" } }, { nome: 1, curtidas: 1, _id: 0 });

// 31 - Retorne o nome dos sandu√≠ches em que o n√∫mero de curtidas √© maior que o n√∫mero de sandu√≠ches vendidos
// Para isso, escreva a query no arquivo desafio31.js
// db.produtos.find({ $expr: { $gt: ["$curtidas", "$vendidos"] } }, { nome: 1, _id: 0 });

// 32 - Retorne o nome e a quantidade de vendas (vendidos) dos sandu√≠ches em que o n√∫mero de vendas √© m√∫ltiplo de 5
// Para isso, escreva a query no arquivo desafio32.js
db.produtos.find({ vendidos: { $mod: [5, 0] } }, { nome: 1, vendidos: 1, _id: 0 });

// db.produtos.find({});

  // {
  //   "_id": {
  //     "$oid": "5f280af11532b7276329ba47"
  //   },
  //   "nome": "Big Mac",
  //   "ingredientes": [
  //     "hamburguer",
  //     "alface",
  //     "queijo",
  //     "molho especial",
  //     "cebola",
  //     "picles",
  //     "p√£o com gergelim"
  //   ],
  //   "tags": [
  //     "bovino",
  //     "p√£o"
  //   ],
  //   "valoresNutricionais": [
  //     {
  //       "tipo": "calorias",
  //       "quantidade": 502,
  //       "unidadeMedida": "kcal",
  //       "percentual": 25
  //     },
  //     {
  //       "tipo": "carboidratos",
  //       "quantidade": 45,
  //       "unidadeMedida": "gramas",
  //       "percentual": 15
  //     },
  //     {
  //       "tipo": "s√≥dio",
  //       "quantidade": 1047,
  //       "unidadeMedida": "miligramas",
  //       "percentual": 44
  //     },
  //     {
  //       "tipo": "prote√≠nas",
  //       "quantidade": 27,
  //       "unidadeMedida": "gramas",
  //       "percentual": 36
  //     },
  //     {
  //       "tipo": "lip√≠dios",
  //       "quantidade": 25,
  //       "unidadeMedida": "gramas",
  //       "percentual": 45
  //     }
  //   ],
  //   "descricao": "N√£o existe nada igual\nDois hamb√∫rgures, alface, queijo, molho especial, cebola e picles num p√£o com gergelim",
  //   "curtidas": 145,
  //   "vendidos": 137,
  //   "avaliacao": 0
  // }